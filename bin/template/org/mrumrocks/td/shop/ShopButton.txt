package org.mrumrocks.td.shop;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;

import jgame.ButtonState;
import jgame.Context;
import jgame.GButton;
import jgame.GContainer;
import jgame.GMessage;
import jgame.GSprite;
import jgame.ImageCache;
import jgame.listener.ButtonListener;

import org.mrumrocks.td.TowerDef;

public class ShopButton extends GButton {

	public PurchaseHandler getPurchaseHandler() {
		return ph;
	}

	public void setPurchaseHandler(PurchaseHandler ph) {
		this.ph = ph;
	}

	private PurchaseHandler ph;

	public ShopButton(Image image, final TowerGenerator tg, final int cost) {
		// Get the cache for easy access.
		ImageCache cache = ImageCache.forClass(TowerDef.class);

		// Set the size.
		setSize(64, 64);

		// Create sprites for the three states.
		GSprite out = new GSprite(cache.get("shop/" + "$$$SHOP_BUTTON_OUT$$$"));
		GSprite hover = new GSprite(cache.get("shop/"
				+ "$$$SHOP_BUTTON_HOVER$$$"));
		GSprite pressed = new GSprite(cache.get("shop/"
				+ "$$$SHOP_BUTTON_PRESSED$$$"));

		// Set the states.
		setStateSprite(ButtonState.NONE, out);
		setStateSprite(ButtonState.HOVERED, hover);
		setStateSprite(ButtonState.PRESSED, pressed);

		// Add the image.
		addAtCenter(new GSprite(image));

		// Create the message for the cost.
		final GContainer msgContainer = new GContainer(new Color(1f, 1f, 1f,
				0.75f));
		msgContainer.setSize(getWidth(), 16);
		addAtCenter(msgContainer);
		msgContainer.setY(getHeight() - 6);
		msgContainer.setVisible(false);

		final GMessage msg = new GMessage("$" + cost);
		msg.setSize(getWidth(), 14);
		msgContainer.addAtCenter(msg);
		msg.setFontSize(12);
		msg.setAlignmentX(.5);
		msg.setAlignmentY(.5);
		msg.setFontStyle(Font.BOLD);

		addListener(new ButtonListener() {
			@Override
			public void mouseClicked(Context context) {
				if (ph.canPurchase(cost)) {
					ph.performPurchase(tg.generateTower(), cost);
				}
			}

			@Override
			public void mouseOut(Context context) {
				msgContainer.setVisible(false);
			}

			@Override
			public void mouseOver(Context context) {
				msgContainer.setVisible(true);
			}
		});
	}

	@Override
	public Shape getBoundingShape() {
		return new RoundRectangle2D.Double(0d, 0d, getWidth(), getHeight(), 8,
				8);
	}

}
